on:
 workflow_call:
   inputs:
     terraform_version:
       required: true
       type: string
     terraform_directory:
       type: string
       default: src
     fixture_directory:
       type: string
       default: fixtures
     has_fixtures:
       type: boolean
       default: true
     test_directory:
       type: string
       default: spec
     has_tests:
       type: boolean
       default: true
   secrets:
     CLIENT_ID:
       required: true
     CLIENT_SECRET:
       required: true
     SUBSCRIPTION_ID:
       required: true
     TENANT_ID:
       required: true
jobs:
  terraform-build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ inputs.terraform_directory }}
    env:
      ARM_CLIENT_ID: "${{ secrets.CLIENT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.TENANT_ID }}"
    steps:
      #- name: 'Az login'
      # uses: azure/login@v1
      #  with:
      #    creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Terraform ${{ inputs.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: false
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validation
        id: validate
        run: terraform validate
        continue-on-error: false
      - name: Create Fixtures
        if: ${{ inputs.has_fixtures }}
        run: |
              terraform init
              terraform apply --auto-approve
              terraform output > ${{github.workspace}}/${{ inputs.terraform_directory }}/fixture.auto.tfvars
        continue-on-error: false
        working-directory: ${{ inputs.fixture_directory }}
      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: false
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply --auto-approve
          
          # generate variables_and_outputs.json (can be used by pester tests)
          terraform plan -json -out="plan.raw"
          terraform show -json plan.raw > variables_and_outputs.json
        continue-on-error: false
        # run tests
      - name: Run Tests
        if: ${{ inputs.has_tests }} && always()
        run: |
          $pester_config = [PesterConfiguration]::Default
          $pester_config.Output.Verbosity = "Detailed"
          $pester_config.Filter.Tag = "ci"

          Invoke-Pester -Configuration $pester_config
        working-directory: ${{ inputs.test_directory }}
        # destroy all resources
      - name: Destroy Terraform
        if: always()
        run: terraform apply -destroy --auto-approve
      - name: Destroy Fixtures
        if: ${{ inputs.has_fixtures }} && always()
        run: terraform apply -destroy --auto-approve
        continue-on-error: false
        working-directory: ${{ inputs.fixture_directory }}

      # - name: Create the plan summary
      #   uses: actions/github-script@v6
      #   if: always()
      #   id: summary
      #   env:
      #     PLAN: '${{ steps.plan.outputs.stdout }}'
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Prep the output
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>
      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`
      #       </details>
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
      #       <details><summary>Show Plan</summary>
            
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
            
      #       </details>
            
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
      #       // 2. Set the output variable
      #       const fs = require('fs');
      #       fs.writeFileSync('${{ inputs.terraform_directory }}/summary.md', output);
      #       core.setOutput('summary', output);
      # - name: Write the step summary
      #   if: always()
      #   run: cat ${{ inputs.terraform_directory }}/summary.md >> $GITHUB_STEP_SUMMARY